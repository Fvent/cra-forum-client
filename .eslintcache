[{"C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\index.js":"1","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\LogIn.jsx":"2","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\Home.jsx":"3","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\Forum.jsx":"4","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\NotFound.jsx":"5","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\App.jsx":"6"},{"size":176,"mtime":1613581755055,"results":"7","hashOfConfig":"8"},{"size":2250,"mtime":1613964072783,"results":"9","hashOfConfig":"8"},{"size":233,"mtime":1612294844012,"results":"10","hashOfConfig":"8"},{"size":2681,"mtime":1613963526186,"results":"11","hashOfConfig":"8"},{"size":201,"mtime":1612296012468,"results":"12","hashOfConfig":"8"},{"size":1987,"mtime":1614112326769,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1pagh0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\index.js",[],["30","31"],"C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\LogIn.jsx",["32"],"import React from 'react';\r\n\r\nconst NVR = \"Error occured on server\";\r\n\r\nexport class LogIn extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username : '',\r\n            password : '',\r\n            jsonData : {}\r\n        }\r\n        this.handleFormChange = this.handleFormChange.bind(this);\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n    }\r\n\r\n    handleFormChange(event){\r\n        var nam = event.target.name;\r\n        var val = event.target.value;\r\n        this.setState({\r\n            [nam]: val\r\n        });\r\n        \r\n    }\r\n\r\n    handleFormSubmit(event){\r\n        event.preventDefault();\r\n        var payload = {'name': this.state.username, 'password': this.state.password};\r\n        console.log(payload);\r\n        var http = new XMLHttpRequest();\r\n        var url = 'http://localhost:1515/login';\r\n        http.open(\"POST\", url);\r\n        http.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        http.send(JSON.stringify(payload));\r\n        http.onreadystatechange = () => {\r\n            \r\n        if(http.responseText === '[]'){\r\n            console.log('not existing user');\r\n            this.props.parentCallback(false, 'not existing user', '');\r\n        }else{\r\n            // console.log(http.responseText);\r\n            // console.log(JSON.parse(http.responseText.replaceAll('[','').replaceAll(']','')));\r\n            var jobj=JSON.parse(http.responseText.replaceAll('[','').replaceAll(']',''));\r\n\r\n            this.props.parentCallback(true, '', jobj);\r\n        }\r\n            \r\n        }\r\n        document.getElementById('login-form').reset();\r\n    }\r\n    render(){\r\n        return (<div id=\"login\">\r\n            <h1>Login</h1>\r\n            \r\n            <form id=\"login-form\" className=\"form-group\" onSubmit={this.handleFormSubmit} > \r\n                <input type=\"text\" className=\"form-control\" name=\"username\" id=\"username\" onChange={this.handleFormChange} />\r\n                <input type=\"password\" className=\"form-control\" name=\"password\" id=\"password\" onChange={this.handleFormChange} />\r\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n\r\n            \r\n        </div>);\r\n    }\r\n}","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\Home.jsx",["33"],"import React from 'react';\r\n\r\nexport class Home extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return (<div id=\"home\">\r\n            <h1>Home</h1>\r\n        </div>);\r\n    }\r\n}","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\Forum.jsx",["34"],"import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\n\r\n\r\nexport class Forum extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          loading : true,\r\n          foruminfo : [],\r\n          // formUserInput: '',\r\n          formCommentInput: ''\r\n        }\r\n\r\n        this.handleCommentSubmit = this.handleCommentSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.getForumInfo = this.getForumInfo.bind(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        this.getForumInfo();\r\n    }\r\n\r\n    async getForumInfo(){ \r\n        const url = 'http://localhost:1515/viewcomments';\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n      \r\n          this.setState({loading: false, foruminfo: data})\r\n          console.log(this.state.foruminfo);\r\n    }\r\n\r\n    handleCommentSubmit(event){\r\n      event.preventDefault();\r\n      // console.log(this.state.formUserInput);\r\n      // console.log(this.state.formCommentInput);\r\n\r\n      var payload = {'user': sessionStorage.getItem('alias'), 'comment': this.state.formCommentInput};\r\n        console.log(payload);\r\n        var http = new XMLHttpRequest();\r\n        var url = 'http://localhost:1515/addcomment';\r\n        http.open(\"POST\", url);\r\n        http.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        http.send(JSON.stringify(payload));\r\n        http.onreadystatechange = () => {\r\n            this.getForumInfo();\r\n        }\r\n\r\n      document.getElementById('forum-form').reset();\r\n    }\r\n\r\n    handleInputChange(event){\r\n        var nam = event.target.name;\r\n        var val = event.target.value;\r\n        // console.log(nam ,'--',val);\r\n        this.setState({\r\n          [nam]: val\r\n        });\r\n    }\r\n\r\n    render(){\r\n        return (<div id=\"forum\">\r\n\r\n          <div id=\"forum-display\">\r\n          <h1>Forum</h1>\r\n           { this.state.loading ? \r\n           <h2>Loading...</h2> : \r\n           this.state.foruminfo.map((item) => <li key={item._id}><h4>{item.user}&nbsp;&nbsp;:&nbsp;&nbsp;{item.comment}</h4></li>)}\r\n          </div>\r\n            \r\n\r\n            <form id=\"forum-form\" className=\"form-group\" onSubmit={this.handleCommentSubmit}>\r\n              {/* <input type=\"text\"  className=\"form-control\" name=\"formUserInput\" id=\"userinput\" onChange={this.handleInputChange} /> */}\r\n              <textarea type=\"text\" className=\"form-control\" name=\"formCommentInput\" id=\"commentinput\" onChange={this.handleInputChange} />\r\n              <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n\r\n        </div>);\r\n    }\r\n}","C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\components\\NotFound.jsx",[],"C:\\Users\\frven\\Desktop\\test\\node-tests\\cra-forum-client\\src\\App.jsx",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":3,"column":7,"nodeType":"41","messageId":"42","endLine":3,"endColumn":10},{"ruleId":"43","severity":1,"message":"44","line":4,"column":5,"nodeType":"45","messageId":"46","endLine":6,"endColumn":6},{"ruleId":"39","severity":1,"message":"47","line":2,"column":10,"nodeType":"41","messageId":"42","endLine":2,"endColumn":14},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'NVR' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Form' is defined but never used.","no-global-assign","no-unsafe-negation"]